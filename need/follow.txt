Program $
Declaration-list ID ; NUM ( { } break if repeat return $
Declaration ID ; NUM ( int void { } break if repeat return $
Declaration-initial ; [ ( ) , 
Declaration-prime ID ; NUM ( int void { } break if repeat return $
Var-declaration-prime ID ; NUM ( int void { } break if repeat return $
Fun-declaration-prime ID ; NUM ( int void { } break if repeat return $
Type-specifier ID 
Params )
Param-list )
Param ) ,
Param-prime ) ,
Compound-stmt ID ; NUM ( int void { } break if else repeat until return $
Statement-list }
Statement ID ; NUM ( { } break if else repeat until return
Expression-stmt ID ; NUM ( { } break if else repeat until return 
Selection-stmt ID ; NUM ( { } break if else repeat until return	
Iteration-stmt ID ; NUM ( { } break if else repeat until return 
Return-stmt ID ; NUM ( { } break if else repeat until return
Return-stmt-prime ID ; NUM ( { } break if else repeat until return 
Expression ; ] ) ,
B ; ] ) ,
H ; ] ) ,
Simple-expression-zegond ; ] ) ,
Simple-expression-prime ; ] ) ,
C ; ] ) ,
Relop ID NUM ( 
Additive-expression ; ] ) ,
Additive-expression-prime ; ] ) , < ==
Additive-expression-zegond ; ] ) , < ==
D ; ] ) , < ==
Addop ID NUM (
Term ; ] ) , < == + -
Term-prime ; ] ) , < == + -
Term-zegond ; ] ) , < == + -
G ; ] ) , < == + -
Factor ; ] ) , < == + - *
Var-call-prime ; ] ) , < == + - *
Var-prime ; ] ) , < == + - *
Factor-prime ; ] ) , < == + - *
Factor-zegond ; ] ) , < == + - *
Args )
Arg-list )
Arg-list-prime )